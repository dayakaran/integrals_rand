[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "integral_demo_II.html",
    "href": "integral_demo_II.html",
    "title": "Estimating 1D integrals",
    "section": "",
    "text": "Compute the integral of \\(f(x) = \\frac{1}{1+x^2}e^{-x}\\) between the limits 0 and 1"
  },
  {
    "objectID": "integral_demo_II.html#poor-convergence",
    "href": "integral_demo_II.html#poor-convergence",
    "title": "Estimating 1D integrals",
    "section": "Poor convergence",
    "text": "Poor convergence\nCompute the value of the definite integral shown below\n\\[\\int_{3}^{\\infty} \\frac{1}{\\sqrt{2 \\pi}} e^{-x^2/2} dx\\]\n\nimport numpy as np\nimport math\nfrom scipy.stats import norm\n\nprng = np.random.default_rng()\n\nnsamples             = 10000\ntruth                = 1-norm.cdf(3)\n\n# Regular Sampling\n\nx_is                 = prng.normal(size=nsamples)\nk_of_xis             = np.ones(nsamples) \nh_of_xis             = np.where(x_is&lt;3.0,0,k_of_xis)\n\nestimate             = np.sum(h_of_xis)/nsamples\nstd_error            = math.sqrt(np.var(h_of_xis, ddof = 1) / nsamples)\nrel_error            = (np.abs(estimate - truth)/truth) * 100\n\nprint(\"True value \", f\"{truth:e}\")\nprint(\"Estimate : \", f\"{estimate:e}\", f\"Standard Error {std_error:e}\", \\\n      f\"Rel Error {rel_error:e} %\")\n\nTrue value  1.349898e-03\nEstimate :  1.400000e-03 Standard Error 3.739224e-04 Rel Error 3.711537e+00 %"
  },
  {
    "objectID": "integral_demo_II.html#importance-sampling",
    "href": "integral_demo_II.html#importance-sampling",
    "title": "Estimating 1D integrals",
    "section": "Importance Sampling",
    "text": "Importance Sampling\n\nimport numpy as np\nimport math\nfrom scipy.stats import norm\n\nprng = np.random.default_rng()\n\nnsamples             = 10000\ntruth                = 1-norm.cdf(3)\n\n# Importance Sampling\n\nx_is                 = prng.normal(loc=4,scale=1,size=nsamples)\nk_of_xis             = norm.pdf(x_is,loc=0)/norm.pdf(x_is,loc=4) \nh_of_xis             = np.where(x_is&lt;3.0,0,k_of_xis)\n\nestimate             = np.sum(h_of_xis)/nsamples\nstd_error            = math.sqrt(np.var(h_of_xis, ddof = 1) / nsamples)\nrel_error            = (np.abs(estimate - truth)/truth) * 100\n\nprint(\"True value \", f\"{truth:e}\")\nprint(\"Estimate : \", f\"{estimate:e}\", f\"Standard Error {std_error:e}\", \\\n      f\"Rel Error {rel_error:e} %\")\n\nTrue value  1.349898e-03\nEstimate :  1.342688e-03 Standard Error 3.119402e-05 Rel Error 5.341135e-01 %"
  },
  {
    "objectID": "integral_demo_I.html",
    "href": "integral_demo_I.html",
    "title": "Linear Congruential Generator",
    "section": "",
    "text": "Starting from a seed \\(I_0\\) subsequent numbers are generated from the relation\n\\[I_{j+1}=(aI_j + c) \\quad \\% \\quad m\\]\nA common choice for the constants are \\(a = 48271\\), \\(m = 2^{31} - 1\\) and \\(c = 0\\)\n# Creating a random number generator\ndef lcg(num = 1, m = 2**31 - 1, a = 48271, c = 0, seed = 231246):\n\n    i1  = seed\n    cnt = 0\n    \n    while (cnt&lt;num):\n        \n        i1   = (a * i1 + c) % m\n        yield i1\n        cnt += 1 \n        \n        \nprint(\"Get 5 random numbers \")\n\nfor r in lcg(5):\n    print(r)\n\nGet 5 random numbers \n425057431\n888488363\n825856136\n1162601595\n1898928841"
  },
  {
    "objectID": "integral_demo_I.html#estimating-1d-integrals",
    "href": "integral_demo_I.html#estimating-1d-integrals",
    "title": "Linear Congruential Generator",
    "section": "Estimating 1D integrals",
    "text": "Estimating 1D integrals\nCompute the integral of \\(f(x) = x^2\\) between the limits 0 and 1\n\nimport numpy as np\nimport math\n\nseed = 728345\n\n# Create random number generator\nprng = np.random.default_rng(seed)\n\n# No. of I.I.Ds drawn\nnsamples = 100000\n\n# True result - this is typically the unknown\n# Since this is a demo we know this value\ntruth    = 1/3\n\n# Limits\na,b      = 0,1\n\nh_of_xis = []\n\nfor _ in range(nsamples):\n    \n    # Get 1 uniform random number between a , b\n    x_is = (b-a)*prng.random() + a\n    \n    # For each random number x_i, compute x_i*x_i\n    h_of_xis.append((b-a)*x_is*x_is)\n\n# From LLN\nestimate = np.sum(np.array(h_of_xis))/nsamples\n\n# Relative error computed from the true value and the estimate\nrel_error = (abs(estimate - truth)/truth) * 100\n\nprint(\"Truth: \", f\"{truth:e}\",\" Estimate : \", f\"{estimate:e}\", f\"Rel Error {rel_error:e}\")\n\nTruth:  3.333333e-01  Estimate :  3.331987e-01 Rel Error 4.038678e-02\n\n\n\nAlternative solution (faster)\n\nimport numpy as np\nimport math\n\nseed = 728345\n\n# Create random number generator\nprng = np.random.default_rng(seed)\n\n# No. of I.I.Ds drawn\nnsamples = 100000\n\n# True result - this is typically the unknown\n# Since this is a demo we know this value\ntruth    = 1/3\n\n# Limits\na,b      = 0,1\n\nh_of_xis = []\n    \n# Get uniform random numbers between a , b\nx_is = (b-a)*prng.random(size = nsamples) + a\n    \n# For each random number x_i, compute x_i*x_i - this is an array operation\nh_of_xis = (b-a)*x_is*x_is\n\n# From LLN\nestimate = np.sum(h_of_xis)/nsamples\n\n# Relative error computed from the true value and the estimate\nrel_error = (abs(estimate - truth)/truth) * 100\n\nprint(\"Truth: \", f\"{truth:e}\",\" Estimate : \", f\"{estimate:e}\", f\"Rel Error {rel_error:e}\")\n\nTruth:  3.333333e-01  Estimate :  3.331987e-01 Rel Error 4.038678e-02"
  },
  {
    "objectID": "integral_demo_I.html#estimating-2d-integrals",
    "href": "integral_demo_I.html#estimating-2d-integrals",
    "title": "Linear Congruential Generator",
    "section": "Estimating 2D integrals",
    "text": "Estimating 2D integrals\nCompute the area of a circle of radius 1\n\\[\\int_{-R}^{R}\\int_{-\\sqrt{R^2 - y^2}}^{\\sqrt{R^2 - y^2}} dxdy\\]\n\nimport random \n\n# Set number of successes to zero. An attempt is a successs if point is within\nn_circle_ind = 0\n\n# Set number of attempts to zero\nnsamples = 1000000\n\nseed = 728345\n\n# Create random number generator\nprng = np.random.default_rng(seed)\n\n# Limits\na, b = -1, 1\n\n# Truth\ntruth = math.pi\n\n# Repeat attempts N times\nfor i in range(nsamples):\n\n    # Generate a random number\n    x_is = (b-a)*prng.random() + a\n    y_is = (b-a)*prng.random() + a\n\n    # Check if it is with the circle\n    if x_is**2 + y_is**2 &lt; 1:\n        n_circle_ind += 1\n       \nprint(\"Estimte of area: \", f\"{(n_circle_ind * ((b-a)**2))/nsamples:e}\",\" Truth : \", f\"{truth:e}\")\n\nEstimte of area:  3.142916e+00  Truth :  3.141593e+00\n\n\n\nAlternative solution (faster)\n\nimport random \n\n# Set number of successes to zero. An attempt is a successs if point is within\nn_circle_ind = 0\n\n# Set number of attempts to zero\nnsamples = 1000000\n\nseed = 728345\n\n# Create random number generator\nprng = np.random.default_rng(seed)\n\n# Limits\na, b = -1, 1\n\n# Truth\ntruth = math.pi\n\n# Repeat attempts N times\n\n# Generate a random number\nx_is = (b-a)*prng.random(size = nsamples) + a\ny_is = (b-a)*prng.random(size = nsamples) + a\n\n# Check if it is with the circle\n\nn_circle_ind = np.sum (np.where( x_is**2 + y_is**2 &lt; 1, 1, 0 ))\n\nprint(\"Estimte of area: \", f\"{(n_circle_ind * ((b-a)**2))/nsamples:e}\",\" Truth : \", f\"{truth:e}\")\n\nEstimte of area:  3.141800e+00  Truth :  3.141593e+00"
  },
  {
    "objectID": "integral_demo_III.html",
    "href": "integral_demo_III.html",
    "title": "Estimating 1D integrals",
    "section": "",
    "text": "Generate random numbers from the distribution \\(f(x) = \\frac{2}{\\pi}cos^2{x}\\)\nEnvelope 1 is uniform distribution \\(\\frac{1}{\\pi}\\)\nEnvelope 2 is the beta distribution with paramaters a = 2 and b = 2\n\nimport math\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\nfrom scipy.stats import beta\n\nsns.set_context('poster')\n\nmpl.rc('text', usetex = True)\nmpl.rc('font', family = 'serif')\n\n\nprng = np.random.default_rng()\n\ndef envelope_uniform():\n    \n    # set M = 2\n    \n    return prng.uniform(low = -math.pi/2, high = math.pi/2)\n\ndef envelope_beta(n):\n    \n    # set M = 1.4\n    \n    return beta.rvs(2, 2, loc = -math.pi/2, scale = math.pi, size = n)\n\n\n# Initialize random number generator\ndef rejection_I(nsample):\n\n# let's use rejection sampling to generate the random numbers\n\n    isample = 0\n    x_is    = np.zeros(nsample)\n\n    # Function that computes 4x^3\n    f_of_x   = lambda x: (2/math.pi)*np.cos(x)**2\n\n    g_of_x   = lambda x: 1/math.pi\n\n    attempts = 0\n\n    while isample &lt; nsample:\n\n        attempts += 1\n\n        # Generate z from u(x)\n        z = envelope_uniform()\n\n        # Random number between 0 and 1\n        h = prng.random()\n\n        # Rejection step\n\n        if h &lt; f_of_x(z)/(2 * g_of_x(z)):\n            x_is[isample] = z\n            isample += 1\n\n    print('Attempts per random number from f(x) = ', attempts/nsample)\n\n    return x_is\n\n\nf_of_x   = lambda x: (2/math.pi)*np.cos(x)**2\n\n# Plot result\nx    = np.linspace(-math.pi/2,math.pi/2,100)\n\nfig, ax = plt.subplots(figsize = (5,4))\n\nax.hist(rejection_I(10000), bins=40, density=True, label='Histogram')\n\nax.plot(x, f_of_x(x), label='PDF')\nax.legend()\n\nax.set_xlabel(r'$x$')\nax.set_ylabel(r'$f(x), H(x)$')\nplt.show()\n\nAttempts per random number from f(x) =  2.0062\n\n\n\n\n\n\nfrom scipy.stats import beta\n\nx    = np.linspace(-math.pi/2,math.pi/2,100)\n\nfig, ax = plt.subplots(figsize = (5,4))\n\nax.plot(x, 1.4*beta.pdf(x, 2, 2, loc = -math.pi/2, scale = math.pi), label='PDF')\nax.plot(x, (2/math.pi)*np.ones(len(x)), label='PDF')\n\nax.legend()\n\nax.set_xlabel(r'$x$')\nax.set_ylabel(r'$f(x)$')\nax.plot(x, f_of_x(x), label='PDF')\nplt.show()\n\n\n\n\n\n# Initialize random number generator\n\ndef rejection_II(nsample):\n    # let's use rejection sampling to generate the random numbers\n\n    isample = 0\n    x_is    = np.zeros(nsample)\n\n    # Function that computes 4x^3\n    f_of_x   = lambda x: (2/math.pi)*np.cos(x)**2\n\n    g_of_x   = lambda x: beta.pdf(x, 2, 2, loc = -math.pi/2, scale = math.pi)\n\n    attempts = 0\n\n    h_is = prng.uniform(size = int(nsample * 1.5))\n    z_is = envelope_beta(int(nsample * 1.5))\n    \n    while isample &lt; nsample:\n\n        # Generate z from u(x)\n        z = z_is[attempts]\n        \n        # Random number between 0 and 1\n        h = h_is[attempts]\n\n        attempts += 1 \n        # Rejection step\n\n        if h &lt; f_of_x(z)/(1.4 * g_of_x(z)):\n            x_is[isample] = z\n            isample += 1\n\n    print('Attempts per random number from f(x) = ', attempts/nsample)\n    \n    return x_is\n        \n\n\nf_of_x   = lambda x: (2/math.pi)*np.cos(x)**2\n\n# Plot result\nx    = np.linspace(-math.pi/2,math.pi/2,100)\n\nfig, ax = plt.subplots(figsize = (5,4))\n\nax.hist(rejection_II(10000), bins=40, density=True, label='Histogram')\nax.plot(x, f_of_x(x), label='PDF')\nax.legend()\n\nax.set_xlabel(r'$x$')\nax.set_ylabel(r'$f(x), H(x)$')\nplt.show()\n\nAttempts per random number from f(x) =  1.3983\n\n\n\n\n\n\n# Array that holds different values of N\nN = np.array([10**x for x in range(3,8)])\n\n# Arrays to hold estimates and standard errors\ne = []; s = []\n\n# This value is from Wolfram Alpha. It is exact upto numerical precision\ntruth    = (math.pi**2 - 6)/12\n\n# Repeat integration for different values of N\nfor nsamples in N:\n\n    # Get uniform random numbers between a , b\n    x_is = rejection_II(nsamples) \n\n    # For each random number x_i, compute x_i*x_i - this is an array operation\n    h_of_xis = x_is*x_is\n\n    # From LLN\n    estimate = np.sum(h_of_xis)/nsamples\n\n    # Relative error computed from the true value and the estimate\n    rel_error = (abs(estimate - truth)/truth) * 100\n\n    # Estimate standard error\n    std_error = np.sqrt(np.var(h_of_xis, ddof = 1) / nsamples)\n    \n    print(\"Truth: \", f\"{truth:e}\",\" Estimate : \", f\"{estimate:e}\", f\"Rel Error {rel_error:e}\")\n    \n    e.append(estimate)\n    s.append(std_error)\n\nAttempts per random number from f(x) =  1.37\nTruth:  3.224670e-01  Estimate :  3.236935e-01 Rel Error 3.803405e-01\nAttempts per random number from f(x) =  1.4036\nTruth:  3.224670e-01  Estimate :  3.241081e-01 Rel Error 5.089037e-01\nAttempts per random number from f(x) =  1.39951\nTruth:  3.224670e-01  Estimate :  3.206688e-01 Rel Error 5.576361e-01\nAttempts per random number from f(x) =  1.400751\nTruth:  3.224670e-01  Estimate :  3.222229e-01 Rel Error 7.570483e-02\nAttempts per random number from f(x) =  1.4002774\nTruth:  3.224670e-01  Estimate :  3.227090e-01 Rel Error 7.504403e-02\n\n\n\n# Plot results\nfig, ax = plt.subplots(1, 2, figsize=(10,5))\n    \nax[0].set_title('Estimate vs N')    \nax[1].set_title('Standard Error vs N')    \n\nax[0].set_ylabel(r'$e$')\nax[0].set_xlabel(r'$log(n)$')\nax[0].plot(np.log10(N), e,'o')\nax[0].hlines(y=truth, xmin = 3, xmax = 7, linestyle='--', color='black')\n\nax[1].set_ylabel(r'$log(s)$')\nax[1].set_xlabel(r'$log(n)$')\nax[1].plot(np.log10(N), np.log10(s),'o')\n\nax[1].plot(np.log10(N), -np.log10(np.sqrt(N))-0.4, label=r'$\\propto \\frac{1}{\\sqrt{n}}$')\nax[1].legend(loc='best')\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Src",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  }
]